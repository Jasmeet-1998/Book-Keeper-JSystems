// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account model
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cards         Card[]
  role          Role      @default(USER)
  plan          Plan      @default(COMMUNITY)
  active        Boolean   @default(true)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cardtype  CardType
  cardno    String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CardType {
  DEBIT
  CREDIT
}

enum Role {
  USER
  ADMIN
}

enum Plan {
  COMMUNITY
  ENTERPRISE
}

// ==== ðŸš§ helpers =====
// model User {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   username  String    @unique
//   email     String    @unique
//   phone     String    @unique
//   password  String
//   role      Role      @default(USER)
//   active    Boolean   @default(true)
//   plan      Plan      @default(COMMUNITY)
//   Contacts  Contact[]
//   Cards     Card[]
// }

// model Contact {
//   id           Int      @id @default(autoincrement())
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   name         String?
//   email        String   @unique
//   phone        String   @unique
//   cardtype     CardType
//   cardno       String   @unique
//   user         User     @relation(fields: [mappeduserId], references: [id])
//   mappeduserId Int      @unique
// }
